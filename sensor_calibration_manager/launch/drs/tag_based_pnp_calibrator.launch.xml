<launch>
  <arg name="camera_name" default="camera0">
    <choice value="camera0"/>
    <choice value="camera1"/>
    <choice value="camera2"/>
    <choice value="camera3"/>
    <choice value="camera4"/>
    <choice value="camera5"/>
    <choice value="camera6"/>
    <choice value="camera7"/>
  </arg>

  <arg name="view_only_ui" default="true" description="By default we use a minimal UI"/>
  <arg name="calibration_pairs" default="14" description="Number of lidar-image pairs for the calibration to converge"/>
  <arg name="calibration_pairs_min_distance" default="0.3" description="Minimum allowed between a new detection and current pairs"/>

  <!-- we do not use the standard image_raw name to avoid naming conflicts -->
  <let name="image_decompressed_topic" value="/sensing/camera/$(var camera_name)/image_raw/decompressed"/>
  <let name="image_compressed_topic" value="/sensing/camera/$(var camera_name)/image_raw/compressed"/>

  <let name="camera_info_topic" value="/sensing/camera/$(var camera_name)/camera_info"/>

  <let name="lidar_frame" value="lidar_front" if="$(eval &quot;'$(var camera_name)' == 'camera0' &quot;)"/>
  <let name="lidar_frame" value="lidar_front" if="$(eval &quot;'$(var camera_name)' == 'camera1' &quot;)"/>
  <let name="lidar_frame" value="lidar_right" if="$(eval &quot;'$(var camera_name)' == 'camera2' &quot;)"/>
  <let name="lidar_frame" value="lidar_right" if="$(eval &quot;'$(var camera_name)' == 'camera3' &quot;)"/>
  <let name="lidar_frame" value="lidar_rear" if="$(eval &quot;'$(var camera_name)' == 'camera4' &quot;)"/>
  <let name="lidar_frame" value="lidar_rear" if="$(eval &quot;'$(var camera_name)' == 'camera5' &quot;)"/>
  <let name="lidar_frame" value="lidar_left" if="$(eval &quot;'$(var camera_name)' == 'camera6' &quot;)"/>
  <let name="lidar_frame" value="lidar_left" if="$(eval &quot;'$(var camera_name)' == 'camera7' &quot;)"/>

  <let name="pointcloud_topic" value="/sensing/lidar/front/nebula_points" if="$(eval &quot;'$(var lidar_frame)' == 'lidar_front' &quot;)"/>
  <let name="pointcloud_topic" value="/sensing/lidar/rear/nebula_points" if="$(eval &quot;'$(var lidar_frame)' == 'lidar_rear' &quot;)"/>
  <let name="pointcloud_topic" value="/sensing/lidar/left/nebula_points" if="$(eval &quot;'$(var lidar_frame)' == 'lidar_left' &quot;)"/>
  <let name="pointcloud_topic" value="/sensing/lidar/right/nebula_points" if="$(eval &quot;'$(var lidar_frame)' == 'lidar_right' &quot;)"/>

  <let name="camera_frame" value="$(var camera_name)/camera_link"/>
  <let name="camera_optical_frame" value="$(var camera_name)/camera_optical_link"/>
  <let name="rviz_profile" value="$(find-pkg-share tag_based_pnp_calibrator)/rviz/default_profile.rviz"/>

  <let name="lidar_model" value="aeva_aeries2" if="$(eval &quot;'$(var lidar_frame)' == 'lidar_front' &quot;)"/>
  <let name="lidar_model" value="seyond_falcon" if="$(eval &quot;'$(var lidar_frame)' == 'lidar_rear' &quot;)"/>
  <let name="lidar_model" value="seyond_robin_w" if="$(eval &quot;'$(var lidar_frame)' == 'lidar_left' &quot;)"/>
  <let name="lidar_model" value="seyond_robin_w" if="$(eval &quot;'$(var lidar_frame)' == 'lidar_right' &quot;)"/>

  <let name="use_rectified_image" value="false"/>

  <group>
    <!-- image decompressor -->
    <node pkg="autoware_image_transport_decompressor" exec="image_transport_decompressor_node" name="decompressor" output="screen">
      <remap from="decompressor/input/compressed_image" to="$(var image_compressed_topic)"/>
      op
      <remap from="decompressor/output/raw_image" to="$(var image_decompressed_topic)"/>

      <param name="encoding" value="default"/>
    </node>

    <!-- tag based calibrator -->
    <include file="$(find-pkg-share tag_based_pnp_calibrator)/launch/calibrator.launch.xml">
      <arg name="image_topic" value="$(var image_decompressed_topic)"/>
      <arg name="camera_info_topic" value="$(var camera_info_topic)"/>
      <arg name="pointcloud_topic" value="$(var pointcloud_topic)"/>
      <arg name="pointcloud_topic_ex" value="$(var camera_info_topic)"/>
      <arg name="lidar_model" value="$(var lidar_model)"/>
      <arg name="calibration_service_name" value="calibrate_camera_lidar"/>

      <arg name="use_rectified_image" value="$(var use_rectified_image)"/>
      <arg name="calibration_pairs" value="$(var calibration_pairs)"/>
      <arg name="calibration_pairs_min_distance" value="$(var calibration_pairs_min_distance)"/>
    </include>

    <!-- interactive calibrator -->
    <node pkg="interactive_camera_lidar_calibrator" exec="interactive_calibrator" name="interactive_calibrator" output="screen" if="$(eval &quot;'$(var view_only_ui)' == 'false' &quot;)">
      <remap from="pointcloud" to="$(var pointcloud_topic)"/>
      <remap from="image" to="$(var image_compressed_topic)"/>
      <remap from="camera_info" to="$(var camera_info_topic)"/>
      <remap from="calibration_points_input" to="calibration_points"/>

      <param name="camera_frame" value="$(var camera_frame)"/>
      <param name="use_calibration_api" value="false"/>
      <param name="can_publish_tf" value="false"/>
    </node>

    <!-- camera view -->
    <node pkg="tier4_calibration_views" exec="image_view_node.py" name="image_view_node_py" output="screen" if="$(eval &quot;'$(var view_only_ui)' == 'true' &quot;)">
      <remap from="pointcloud" to="$(var pointcloud_topic)"/>
      <remap from="image" to="$(var image_compressed_topic)"/>
      <remap from="camera_info" to="$(var camera_info_topic)"/>
      <remap from="calibration_points_input" to="calibration_points"/>
    </node>

    <!-- create a placeholder lidar frame to make the rviz profile generic -->
    <node pkg="tf2_ros" exec="static_transform_publisher" name="tf_broadcaster" output="screen" args="0 0 0 0 0 0 $(var lidar_frame) lidar_frame"/>
    <node
      pkg="tf2_ros"
      exec="static_transform_publisher"
      name="tf_broadcaster"
      output="screen"
      args="--frame-id  $(var lidar_frame) --child-frame-id base_link --x 0.0 --y 0.0 --z -2.0 --yaw 0.0 --roll 0.0 --pitch 0.0"
    />
    <node
      pkg="tf2_ros"
      exec="static_transform_publisher"
      name="tf_broadcaster"
      output="screen"
      args="--frame-id  $(var lidar_frame) --child-frame-id $(var camera_frame) --x 0.0 --y 0.0 --z 0.0 --yaw 1.54 --roll 0.0 --pitch 0.0"
      if="$(eval &quot;'$(var lidar_frame)' == 'lidar_front' &quot;)"
    />
    <node
      pkg="tf2_ros"
      exec="static_transform_publisher"
      name="tf_broadcaster"
      output="screen"
      args="--frame-id  $(var lidar_frame) --child-frame-id $(var camera_frame) --x 0.0 --y 0.0 --z 0.0 --yaw 0.523599 --roll 0.0 --pitch 0.523599"
      if="$(eval &quot;'$(var camera_name)' == 'camera2' &quot;)"
    />
    <node
      pkg="tf2_ros"
      exec="static_transform_publisher"
      name="tf_broadcaster"
      output="screen"
      args="--frame-id  $(var lidar_frame) --child-frame-id $(var camera_frame) --x 0.0 --y 0.0 --z 0.0 --yaw -0.523599 --roll 0.0 --pitch 0.523599"
      if="$(eval &quot;'$(var camera_name)' == 'camera3' &quot;)"
    />
    <node
      pkg="tf2_ros"
      exec="static_transform_publisher"
      name="tf_broadcaster"
      output="screen"
      args="--frame-id  $(var lidar_frame) --child-frame-id $(var camera_frame) --x 0.0 --y 0.0 --z 0.0 --yaw 0.0 --roll 0.0 --pitch 0.0"
      if="$(eval &quot;'$(var lidar_frame)' == 'lidar_rear' &quot;)"
    />
    <node
      pkg="tf2_ros"
      exec="static_transform_publisher"
      name="tf_broadcaster"
      output="screen"
      args="--frame-id  $(var lidar_frame) --child-frame-id $(var camera_frame) --x 0.0 --y 0.0 --z 0.0 --yaw 0.523599 --roll 0.0 --pitch 0.523599"
      if="$(eval &quot;'$(var camera_name)' == 'camera6' &quot;)"
    />
    <node
      pkg="tf2_ros"
      exec="static_transform_publisher"
      name="tf_broadcaster"
      output="screen"
      args="--frame-id  $(var lidar_frame) --child-frame-id $(var camera_frame) --x 0.0 --y 0.0 --z 0.0 --yaw -0.523599 --roll 0.0 --pitch 0.523599"
      if="$(eval &quot;'$(var camera_name)' == 'camera7' &quot;)"
    />
    <node
      pkg="tf2_ros"
      exec="static_transform_publisher"
      name="tf_broadcaster"
      output="screen"
      args="--frame-id $(var camera_frame) --child-frame-id $(var camera_optical_frame) --x 0.0 --y 0.0 --z 0.0 --qx 0.5  --qy -0.5  --qz 0.5  --qw -0.5"
    />

    <!-- remap the pointcloud topic to make the rviz profile generic -->
    <node pkg="rviz2" exec="rviz2" name="rviz2" output="screen" args="-d $(var rviz_profile)">
      <remap from="pointcloud_topic_placeholder" to="$(var pointcloud_topic)"/>
    </node>
  </group>
</launch>
